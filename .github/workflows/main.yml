name: Terraform with User-assigned Managed Identity
on:
  workflow_dispatch:

jobs:
  setup:
    name: Set Environment
    runs-on: self-hosted
    outputs:
      DEPLOY_ENVIRONMENT: ${{ steps.env.outputs.DEPLOY_ENVIRONMENT }}
    steps:
      - name: "compute environment variables"
        id: env
        run: |
          echo "DEPLOY_ENVIRONMENT=$([[ ${{ github.ref_name }} == 'main' ]] && echo 'production' || echo ${{ github.ref_name }})" >> $GITHUB_OUTPUT

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: self-hosted
    needs: [setup]
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    
    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Azure login
      uses: azure/login@v2
      with:
        auth-type: IDENTITY
        client-id:  ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id:  ${{ secrets.AZURE_TENANT_ID }}
        subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Storage Account Key
      id: get-key-st
      run: |
        ACCOUNT_KEY=$(az storage account keys list --resource-group  ${{ secrets.TF_BACKEND_RESOURCE_GROUP_NAME }} --account-name ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }}  --query '[0].value' -o tsv)
        echo "ARM_ACCESS_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_BACKEND_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.TF_BACKEND_CONTAINER_NAME }}" \
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}"

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        terraform plan -detailed-exitcode -no-color -out tfplan ||
        echo "exitcode=$?" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
    
    - name: Scan Checkov
      #if: steps.tf-plan.outputs.exitcode == 2
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        output_format: cli
        quiet: false
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      if: steps.tf-plan.outputs.exitcode == 2
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan
                
  terraform-apply:
    name: 'Terraform Apply'
    if: needs.terraform-plan.outputs.tfplanExitCode == '2'
    runs-on: self-hosted
    #environment: ${{ needs.setup.outputs.DEPLOY_ENVIRONMENT }}
    needs: [terraform-plan]

    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Azure login
      uses: azure/login@v2
      with:
        auth-type: IDENTITY
        client-id:  ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id:  ${{ secrets.AZURE_TENANT_ID }}
        subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Storage Account Key
      id: get-key-st
      run: |
        ACCOUNT_KEY=$(az storage account keys list --resource-group  ${{ secrets.TF_BACKEND_RESOURCE_GROUP_NAME }} --account-name ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }}  --query '[0].value' -o tsv)
        echo "ARM_ACCESS_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_BACKEND_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.TF_BACKEND_CONTAINER_NAME }}" \
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}"

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan